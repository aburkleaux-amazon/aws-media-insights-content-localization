name: pr-workflow

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - development

jobs:
  # Build and new deploy based on latest release of MIE
  build-content-localization-dev-us-west-2:
    runs-on: ubuntu-latest
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}

      - name: Initialize AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Generate short sha
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Run build script
        run: |
          cd deployment
          CONTENT_LOCALIZATION_STACK_NAME="pr${SHORT_SHA}"
          EMAIL=micontentlocalization@gmail.com
          REGION=us-west-2
          VERSION="pr-${SHORT_SHA}"
          DIST_OUTPUT_BUCKET=micl-dev
          TEMPLATE_OUTPUT_BUCKET=$DIST_OUTPUT_BUCKET-$REGION
          ./build.sh $DIST_OUTPUT_BUCKET-$REGION $VERSION $REGION
          echo "read in the template"
          read -r TEMPLATE < ../src/templateUrlMieRelease.txt

      - name: 'Upload One-click Deployment Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: templateUrlMieRelease
          path: src/templateUrlMieRelease.txt
          retention-days: 3
      - name: 'Upload Developer Deployment Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: templateUrlMieDevelopment
          path: src/templateUrlMieDevelopment.txt
          retention-days: 3

  build-mie-dev-us-west-2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout MIE development branch
        uses: actions/checkout@v2
        with:
          repository: awslabs/aws-media-insights-engine
          ref: development

      - name: Initialize AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Generate short sha
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Run build script
        run: |
          cd deployment
          MIE_STACK_NAME="prm${SHORT_SHA}"
          REGION=us-west-2
          VERSION="pr${SHORT_SHA}"
          DIST_OUTPUT_BUCKET=micl-dev
          TEMPLATE_OUTPUT_BUCKET=micl-dev-us-west-2
          ./build-s3-dist.sh --no-layer --template-bucket $TEMPLATE_OUTPUT_BUCKET --code-bucket $DIST_OUTPUT_BUCKET --version $VERSION --region $REGION
          read -r TEMPLATE < templateUrl.txt
          pwd

      - name: 'Upload MIE One-click Deployment Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: templateUrl
          path: deployment/templateUrl.txt
          retention-days: 3
  

  scan-3rd-party-data-us-west-2:
    needs: build-content-localization-dev-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}

      - name: Initialize test AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2

      # FIXME - need to identify what to scan for here - new entries in packages, 
      # python dependencies, other copyrighted code ...
      - name: Get stack name
        run: |
          echo "CONTENT_LOCALIZATION_STACK_NAME=pr`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Scan for new third party packages
        run: |
          echo "TBD - scan for new 3rd party pacakges"
      
      # FIXME - need to identify what to scan for here - is Trufflehog enough?
      - name: Scan for sensitive data
        run: |
          echo "TBD - Scan for sensitive data"
      
      # FIXME - need to make sure this is working properly
      # scan for various types of keys and tokens
      - name: Trufflehog Scan
        uses: edplato/trufflehog-actions-scan@master
        with:
          scanArguments: '--regex --entropy=False'   

  scan-us-west-2:
    needs: build-content-localization-dev-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}

      - name: Initialize test AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2

      - name: Generate short sha
        run: |
          echo "CONTENT_LOCALIZATION_STACK_NAME=pr`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Run cfn_nag
        uses: stelligent/cfn_nag@master
        continue-on-error: true
        with:
            input_path: deployment
  
      # FIXME - This is not working.  Need to test more
      # check it with Hawkeye
      # - name: Hawkeye Scanner
      #   uses: ./.github/actions/hawkeye-scan



  deploy-mie-dev-us-west-2:
    needs: build-mie-dev-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}
      - name: Initialize build AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2
      - name: Generate short sha
        run: |
          echo "MIE_STACK_NAME=prm`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - name: Deploy
        run: |
          EMAIL=micontentlocalization@gmail.com
          REGION=us-west-2
          VERSION="pr-${SHORT_SHA}"
          DIST_OUTPUT_BUCKET=micl-dev
          TEMPLATE_OUTPUT_BUCKET=$DIST_OUTPUT_BUCKET-$REGION
          TEMPLATE=`cat templateUrl/templateUrl.txt`
          
          echo "deploy cloudformation: 'aws cloudformation create-stack --stack-name $MIE_STACK_NAME --template-url $TEMPLATE --region $REGION --parameters ParameterKey=DeployTestResources,ParameterValue=true ParameterKey=MaxConcurrentWorkflows,ParameterValue=10 ParameterKey=DeployAnalyticsPipeline,ParameterValue=true ParameterKey=EnableXrayTrace,ParameterValue=true --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback'"
          aws cloudformation create-stack --stack-name $MIE_STACK_NAME --template-url $TEMPLATE --region $REGION --parameters ParameterKey=DeployTestResources,ParameterValue=true ParameterKey=MaxConcurrentWorkflows,ParameterValue=10 ParameterKey=DeployAnalyticsPipeline,ParameterValue=true ParameterKey=EnableXrayTrace,ParameterValue=true --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback
          aws cloudformation wait stack-create-complete --stack-name $MIE_STACK_NAME
          exit 0
  
  deploy-content-localization-dev-us-west-2:
    needs: 
      - deploy-mie-dev-us-west-2
      - build-content-localization-dev-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}
      - name: Initialize build AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2
      - name: Generate short sha
        run: |
          echo "CONTENT_LOCALIZATION_STACK_NAME=pr`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "MIE_STACK_NAME=prm`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - name: Deploy
        run: |
          EMAIL=micontentlocalization@gmail.com
          REGION=us-west-2
          VERSION="pr-${SHORT_SHA}"
          DIST_OUTPUT_BUCKET=micl-dev
          TEMPLATE_OUTPUT_BUCKET=$DIST_OUTPUT_BUCKET-$REGION
          CLOUDFORMATION_TEMPLATE=`cat templateUrlMieDevelopment/templateUrlMieDevelopment.txt`
          
          echo "deploy cloudformation: 'aws cloudformation create-stack --stack-name $CONTENT_LOCALIZATION_STACK_NAME --template-url $CLOUDFORMATION_TEMPLATE --region $REGION --parameters ParameterKey=AdminEmail,ParameterValue=$EMAIL ParameterKey=ElasticSearchNodeSize,ParameterValue=t2.small.elasticsearch ParameterKey=MieStackName,ParameterValue=$MIE_STACK_NAME --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback'"
          aws cloudformation create-stack --stack-name $CONTENT_LOCALIZATION_STACK_NAME --template-url $CLOUDFORMATION_TEMPLATE --region $REGION --parameters ParameterKey=AdminEmail,ParameterValue=$EMAIL ParameterKey=ElasticSearchNodeSize,ParameterValue=t2.small.elasticsearch ParameterKey=MieStackName,ParameterValue=$MIE_STACK_NAME --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback
          aws cloudformation wait stack-create-complete --stack-name $CONTENT_LOCALIZATION_STACK_NAME
          exit 0

  test-content-localization-dev-us-west-2:
    needs: deploy-content-localization-dev-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}

      - name: Initialize test AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2

      - name: Generate short sha
        run: |
          echo "CONTENT_LOCALIZATION_STACK_NAME=pr`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "MIE_STACK_NAME=prm`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Run cfn_nag
        uses: stelligent/cfn_nag@master
        continue-on-error: true
        with:
            input_path: deployment

      # FIXME - need unit tests
      # - name: Run unit tests
      #   run: |
      #     cd $GITHUB_WORKSPACE
      #     cd test/unit
      #     ./run_unit.sh workflowapi
      #     ./run_unit.sh dataplaneapi
      
      # FIXME - need integration tests
      # - name: Run integ tests
      #   run: |
      #     cd $GITHUB_WORKSPACE
      #     cd test/integ
      #     ./run_integ.sh

      - name: Initialize build AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Delete stack
        run: |
          aws cloudformation delete-stack --stack-name $CONTENT_LOCALIZATION_STACK_NAME
          aws cloudformation wait stack-delete-complete --stack-name $CONTENT_LOCALIZATION_STACK_NAME
          aws cloudformation delete-stack --stack-name $MIE_STACK_NAME
          aws cloudformation wait stack-delete-complete --stack-name $MIE_STACK_NAME

